!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BasicBlock	models/resnet.py	/^class BasicBlock(nn.Module):$/;"	c
BasicBlock	models/senet.py	/^class BasicBlock(nn.Module):$/;"	c
BasicBlock	models/shufflenetv2.py	/^class BasicBlock(nn.Module):$/;"	c
Binarize	models/quant.py	/^def Binarize(tensor):$/;"	f
BinarizeAct	models/quant.py	/^class BinarizeAct(Function):$/;"	c
BinarizeActLayer	models/quant.py	/^class BinarizeActLayer(nn.Module):$/;"	c
BinarizeConv2d	models/quant.py	/^class BinarizeConv2d(nn.Conv2d):$/;"	c
BinarizeLinear	models/quant.py	/^class BinarizeLinear(nn.Linear):$/;"	c
Block	models/efficientnet.py	/^class Block(nn.Module):$/;"	c
Block	models/mobilenet.py	/^class Block(nn.Module):$/;"	c
Block	models/mobilenetv2.py	/^class Block(nn.Module):$/;"	c
Block	models/resnext.py	/^class Block(nn.Module):$/;"	c
Bottleneck	models/densenet.py	/^class Bottleneck(nn.Module):$/;"	c
Bottleneck	models/dpn.py	/^class Bottleneck(nn.Module):$/;"	c
Bottleneck	models/resnet.py	/^class Bottleneck(nn.Module):$/;"	c
Bottleneck	models/shufflenet.py	/^class Bottleneck(nn.Module):$/;"	c
CellA	models/pnasnet.py	/^class CellA(nn.Module):$/;"	c
CellB	models/pnasnet.py	/^class CellB(nn.Module):$/;"	c
DPN	models/dpn.py	/^class DPN(nn.Module):$/;"	c
DPN26	models/dpn.py	/^def DPN26():$/;"	f
DPN92	models/dpn.py	/^def DPN92():$/;"	f
DenseNet	models/densenet.py	/^class DenseNet(nn.Module):$/;"	c
DenseNet121	models/densenet.py	/^def DenseNet121():$/;"	f
DenseNet161	models/densenet.py	/^def DenseNet161():$/;"	f
DenseNet169	models/densenet.py	/^def DenseNet169():$/;"	f
DenseNet201	models/densenet.py	/^def DenseNet201():$/;"	f
DownBlock	models/shufflenetv2.py	/^class DownBlock(nn.Module):$/;"	c
EfficientNet	models/efficientnet.py	/^class EfficientNet(nn.Module):$/;"	c
EfficientNetB0	models/efficientnet.py	/^def EfficientNetB0():$/;"	f
GoogLeNet	models/googlenet.py	/^class GoogLeNet(nn.Module):$/;"	c
HingeLoss	models/quant.py	/^class HingeLoss(nn.Module):$/;"	c
Inception	models/googlenet.py	/^class Inception(nn.Module):$/;"	c
LeNet	models/lenet.py	/^class LeNet(nn.Module):$/;"	c
MobileNet	models/mobilenet.py	/^class MobileNet(nn.Module):$/;"	c
MobileNetV2	models/mobilenetv2.py	/^class MobileNetV2(nn.Module):$/;"	c
PNASNet	models/pnasnet.py	/^class PNASNet(nn.Module):$/;"	c
PNASNetA	models/pnasnet.py	/^def PNASNetA():$/;"	f
PNASNetB	models/pnasnet.py	/^def PNASNetB():$/;"	f
PreActBlock	models/preact_resnet.py	/^class PreActBlock(nn.Module):$/;"	c
PreActBlock	models/senet.py	/^class PreActBlock(nn.Module):$/;"	c
PreActBottleneck	models/preact_resnet.py	/^class PreActBottleneck(nn.Module):$/;"	c
PreActResNet	models/preact_resnet.py	/^class PreActResNet(nn.Module):$/;"	c
PreActResNet101	models/preact_resnet.py	/^def PreActResNet101():$/;"	f
PreActResNet152	models/preact_resnet.py	/^def PreActResNet152():$/;"	f
PreActResNet18	models/preact_resnet.py	/^def PreActResNet18():$/;"	f
PreActResNet34	models/preact_resnet.py	/^def PreActResNet34():$/;"	f
PreActResNet50	models/preact_resnet.py	/^def PreActResNet50():$/;"	f
Quantize	models/quant.py	/^def Quantize(tensor, n_bits=2):$/;"	f
QuantizeAct	models/quant.py	/^class QuantizeAct(Function):$/;"	c
QuantizeActLayer	models/quant.py	/^class QuantizeActLayer(nn.Module):$/;"	c
QuantizeConv2d	models/quant.py	/^class QuantizeConv2d(nn.Conv2d):$/;"	c
QuantizeLinear	models/quant.py	/^class QuantizeLinear(nn.Linear):$/;"	c
ResNeXt	models/resnext.py	/^class ResNeXt(nn.Module):$/;"	c
ResNeXt29_2x64d	models/resnext.py	/^def ResNeXt29_2x64d():$/;"	f
ResNeXt29_32x4d	models/resnext.py	/^def ResNeXt29_32x4d():$/;"	f
ResNeXt29_4x64d	models/resnext.py	/^def ResNeXt29_4x64d():$/;"	f
ResNeXt29_8x64d	models/resnext.py	/^def ResNeXt29_8x64d():$/;"	f
ResNet	models/resnet.py	/^class ResNet(nn.Module):$/;"	c
ResNet101	models/resnet.py	/^def ResNet101():$/;"	f
ResNet152	models/resnet.py	/^def ResNet152():$/;"	f
ResNet18	models/resnet.py	/^def ResNet18():$/;"	f
ResNet34	models/resnet.py	/^def ResNet34():$/;"	f
ResNet50	models/resnet.py	/^def ResNet50():$/;"	f
SENet	models/senet.py	/^class SENet(nn.Module):$/;"	c
SENet18	models/senet.py	/^def SENet18():$/;"	f
SGD_binary	utils.py	/^class SGD_binary(torch.optim.SGD):$/;"	c
SepConv	models/pnasnet.py	/^class SepConv(nn.Module):$/;"	c
ShuffleBlock	models/shufflenet.py	/^class ShuffleBlock(nn.Module):$/;"	c
ShuffleBlock	models/shufflenetv2.py	/^class ShuffleBlock(nn.Module):$/;"	c
ShuffleNet	models/shufflenet.py	/^class ShuffleNet(nn.Module):$/;"	c
ShuffleNetG2	models/shufflenet.py	/^def ShuffleNetG2():$/;"	f
ShuffleNetG3	models/shufflenet.py	/^def ShuffleNetG3():$/;"	f
ShuffleNetV2	models/shufflenetv2.py	/^class ShuffleNetV2(nn.Module):$/;"	c
SplitBlock	models/shufflenetv2.py	/^class SplitBlock(nn.Module):$/;"	c
TOTAL_BAR_LENGTH	utils.py	/^TOTAL_BAR_LENGTH = 50.$/;"	v
Transition	models/densenet.py	/^class Transition(nn.Module):$/;"	c
VGG	models/vgg.py	/^class VGG(nn.Module):$/;"	c
VGG_binary	models/vgg_binary.py	/^class VGG_binary(nn.Module):$/;"	c
VGG_quant	models/vgg_quant.py	/^class VGG_quant(nn.Module):$/;"	c
__init__	models/densenet.py	/^    def __init__(self, block, nblocks, growth_rate=12, reduction=0.5, num_classes=10):$/;"	m	class:DenseNet
__init__	models/densenet.py	/^    def __init__(self, in_planes, growth_rate):$/;"	m	class:Bottleneck
__init__	models/densenet.py	/^    def __init__(self, in_planes, out_planes):$/;"	m	class:Transition
__init__	models/dpn.py	/^    def __init__(self, cfg):$/;"	m	class:DPN
__init__	models/dpn.py	/^    def __init__(self, last_planes, in_planes, out_planes, dense_depth, stride, first_layer):$/;"	m	class:Bottleneck
__init__	models/efficientnet.py	/^    def __init__(self, cfg, num_classes=10):$/;"	m	class:EfficientNet
__init__	models/efficientnet.py	/^    def __init__(self, in_planes, out_planes, expansion, stride):$/;"	m	class:Block
__init__	models/googlenet.py	/^    def __init__(self):$/;"	m	class:GoogLeNet
__init__	models/googlenet.py	/^    def __init__(self, in_planes, n1x1, n3x3red, n3x3, n5x5red, n5x5, pool_planes):$/;"	m	class:Inception
__init__	models/lenet.py	/^    def __init__(self):$/;"	m	class:LeNet
__init__	models/mobilenet.py	/^    def __init__(self, in_planes, out_planes, stride=1):$/;"	m	class:Block
__init__	models/mobilenet.py	/^    def __init__(self, num_classes=10):$/;"	m	class:MobileNet
__init__	models/mobilenetv2.py	/^    def __init__(self, in_planes, out_planes, expansion, stride):$/;"	m	class:Block
__init__	models/mobilenetv2.py	/^    def __init__(self, num_classes=10):$/;"	m	class:MobileNetV2
__init__	models/pnasnet.py	/^    def __init__(self, cell_type, num_cells, num_planes):$/;"	m	class:PNASNet
__init__	models/pnasnet.py	/^    def __init__(self, in_planes, out_planes, kernel_size, stride):$/;"	m	class:SepConv
__init__	models/pnasnet.py	/^    def __init__(self, in_planes, out_planes, stride=1):$/;"	m	class:CellA
__init__	models/pnasnet.py	/^    def __init__(self, in_planes, out_planes, stride=1):$/;"	m	class:CellB
__init__	models/preact_resnet.py	/^    def __init__(self, block, num_blocks, num_classes=10):$/;"	m	class:PreActResNet
__init__	models/preact_resnet.py	/^    def __init__(self, in_planes, planes, stride=1):$/;"	m	class:PreActBlock
__init__	models/preact_resnet.py	/^    def __init__(self, in_planes, planes, stride=1):$/;"	m	class:PreActBottleneck
__init__	models/quant.py	/^    def __init__(self):$/;"	m	class:HingeLoss
__init__	models/quant.py	/^    def __init__(self, *kargs, **kwargs):$/;"	m	class:BinarizeConv2d
__init__	models/quant.py	/^    def __init__(self, *kargs, **kwargs):$/;"	m	class:BinarizeLinear
__init__	models/quant.py	/^    def __init__(self, *kargs, **kwargs):$/;"	m	class:QuantizeConv2d
__init__	models/quant.py	/^    def __init__(self, *kargs, **kwargs):$/;"	m	class:QuantizeLinear
__init__	models/quant.py	/^    def __init__(self, inplace=True):$/;"	m	class:BinarizeActLayer
__init__	models/quant.py	/^    def __init__(self, n_bits=2, inplace=True):$/;"	m	class:QuantizeActLayer
__init__	models/resnet.py	/^    def __init__(self, block, num_blocks, num_classes=10):$/;"	m	class:ResNet
__init__	models/resnet.py	/^    def __init__(self, in_planes, planes, stride=1):$/;"	m	class:BasicBlock
__init__	models/resnet.py	/^    def __init__(self, in_planes, planes, stride=1):$/;"	m	class:Bottleneck
__init__	models/resnext.py	/^    def __init__(self, in_planes, cardinality=32, bottleneck_width=4, stride=1):$/;"	m	class:Block
__init__	models/resnext.py	/^    def __init__(self, num_blocks, cardinality, bottleneck_width, num_classes=10):$/;"	m	class:ResNeXt
__init__	models/senet.py	/^    def __init__(self, block, num_blocks, num_classes=10):$/;"	m	class:SENet
__init__	models/senet.py	/^    def __init__(self, in_planes, planes, stride=1):$/;"	m	class:BasicBlock
__init__	models/senet.py	/^    def __init__(self, in_planes, planes, stride=1):$/;"	m	class:PreActBlock
__init__	models/shufflenet.py	/^    def __init__(self, cfg):$/;"	m	class:ShuffleNet
__init__	models/shufflenet.py	/^    def __init__(self, groups):$/;"	m	class:ShuffleBlock
__init__	models/shufflenet.py	/^    def __init__(self, in_planes, out_planes, stride, groups):$/;"	m	class:Bottleneck
__init__	models/shufflenetv2.py	/^    def __init__(self, groups=2):$/;"	m	class:ShuffleBlock
__init__	models/shufflenetv2.py	/^    def __init__(self, in_channels, out_channels):$/;"	m	class:DownBlock
__init__	models/shufflenetv2.py	/^    def __init__(self, in_channels, split_ratio=0.5):$/;"	m	class:BasicBlock
__init__	models/shufflenetv2.py	/^    def __init__(self, net_size):$/;"	m	class:ShuffleNetV2
__init__	models/shufflenetv2.py	/^    def __init__(self, ratio):$/;"	m	class:SplitBlock
__init__	models/vgg.py	/^    def __init__(self, vgg_name):$/;"	m	class:VGG
__init__	models/vgg_binary.py	/^    def __init__(self, vgg_name, fc=1024):$/;"	m	class:VGG_binary
__init__	models/vgg_quant.py	/^    def __init__(self, vgg_name, a_bits=2, w_bits=2, fc=1024):$/;"	m	class:VGG_quant
__init__	utils.py	/^    def __init__(self, params, lr=0.1, momentum=0, dampening=0,$/;"	m	class:SGD_binary
__optimizers	utils.py	/^__optimizers = {$/;"	v
_downsample	models/pnasnet.py	/^    def _downsample(self, planes):$/;"	m	class:PNASNet
_make_dense_layers	models/densenet.py	/^    def _make_dense_layers(self, block, in_planes, nblock):$/;"	m	class:DenseNet
_make_layer	models/dpn.py	/^    def _make_layer(self, in_planes, out_planes, num_blocks, dense_depth, stride):$/;"	m	class:DPN
_make_layer	models/pnasnet.py	/^    def _make_layer(self, planes, num_cells):$/;"	m	class:PNASNet
_make_layer	models/preact_resnet.py	/^    def _make_layer(self, block, planes, num_blocks, stride):$/;"	m	class:PreActResNet
_make_layer	models/resnet.py	/^    def _make_layer(self, block, planes, num_blocks, stride):$/;"	m	class:ResNet
_make_layer	models/resnext.py	/^    def _make_layer(self, num_blocks, stride):$/;"	m	class:ResNeXt
_make_layer	models/senet.py	/^    def _make_layer(self, block, planes, num_blocks, stride):$/;"	m	class:SENet
_make_layer	models/shufflenet.py	/^    def _make_layer(self, out_planes, num_blocks, groups):$/;"	m	class:ShuffleNet
_make_layer	models/shufflenetv2.py	/^    def _make_layer(self, out_channels, num_blocks):$/;"	m	class:ShuffleNetV2
_make_layers	models/efficientnet.py	/^    def _make_layers(self, in_planes):$/;"	m	class:EfficientNet
_make_layers	models/mobilenet.py	/^    def _make_layers(self, in_planes):$/;"	m	class:MobileNet
_make_layers	models/mobilenetv2.py	/^    def _make_layers(self, in_planes):$/;"	m	class:MobileNetV2
_make_layers	models/vgg.py	/^    def _make_layers(self, cfg):$/;"	m	class:VGG
_make_layers	models/vgg_binary.py	/^    def _make_layers(self, cfg):$/;"	m	class:VGG_binary
_make_layers	models/vgg_quant.py	/^    def _make_layers(self, cfg):$/;"	m	class:VGG_quant
adjust_optimizer	utils.py	/^def adjust_optimizer(optimizer, epoch, config):$/;"	f
args	main.py	/^args = parser.parse_args()$/;"	v
backward	models/quant.py	/^    def backward(ctx, grad_output):$/;"	m	class:BinarizeAct
backward	models/quant.py	/^    def backward(ctx, grad_output):$/;"	m	class:QuantizeAct
begin_time	utils.py	/^begin_time = last_time$/;"	v
best_acc	main.py	/^    best_acc = checkpoint['acc']$/;"	v
best_acc	main.py	/^best_acc = 0  # best test accuracy$/;"	v
cfg	models/mobilenet.py	/^    cfg = [64, (128,2), 128, (256,2), 256, (512,2), 512, 512, 512, 512, 512, (1024,2), 1024]$/;"	v	class:MobileNet
cfg	models/mobilenetv2.py	/^    cfg = [(1,  16, 1, 1),$/;"	v	class:MobileNetV2
cfg	models/vgg.py	/^cfg = {$/;"	v
cfg	models/vgg_binary.py	/^cfg = {$/;"	v
cfg	models/vgg_quant.py	/^cfg = {$/;"	v
checkpoint	main.py	/^    checkpoint = torch.load('.\/checkpoint\/ckpt.pth')$/;"	v
checkpoint	main.py	/^    checkpoint = torch.load(model_path)$/;"	v
configs	models/shufflenetv2.py	/^configs = {$/;"	v
criterion	main.py	/^criterion = nn.CrossEntropyLoss()$/;"	v
densenet_cifar	models/densenet.py	/^def densenet_cifar():$/;"	f
device	main.py	/^device = 'cuda' if torch.cuda.is_available() else 'cpu'$/;"	v
expansion	models/preact_resnet.py	/^    expansion = 1$/;"	v	class:PreActBlock
expansion	models/preact_resnet.py	/^    expansion = 4$/;"	v	class:PreActBottleneck
expansion	models/resnet.py	/^    expansion = 1$/;"	v	class:BasicBlock
expansion	models/resnet.py	/^    expansion = 4$/;"	v	class:Bottleneck
expansion	models/resnext.py	/^    expansion = 2$/;"	v	class:Block
forward	models/densenet.py	/^    def forward(self, x):$/;"	m	class:Bottleneck
forward	models/densenet.py	/^    def forward(self, x):$/;"	m	class:DenseNet
forward	models/densenet.py	/^    def forward(self, x):$/;"	m	class:Transition
forward	models/dpn.py	/^    def forward(self, x):$/;"	m	class:Bottleneck
forward	models/dpn.py	/^    def forward(self, x):$/;"	m	class:DPN
forward	models/efficientnet.py	/^    def forward(self, x):$/;"	m	class:Block
forward	models/efficientnet.py	/^    def forward(self, x):$/;"	m	class:EfficientNet
forward	models/googlenet.py	/^    def forward(self, x):$/;"	m	class:GoogLeNet
forward	models/googlenet.py	/^    def forward(self, x):$/;"	m	class:Inception
forward	models/lenet.py	/^    def forward(self, x):$/;"	m	class:LeNet
forward	models/mobilenet.py	/^    def forward(self, x):$/;"	m	class:Block
forward	models/mobilenet.py	/^    def forward(self, x):$/;"	m	class:MobileNet
forward	models/mobilenetv2.py	/^    def forward(self, x):$/;"	m	class:Block
forward	models/mobilenetv2.py	/^    def forward(self, x):$/;"	m	class:MobileNetV2
forward	models/pnasnet.py	/^    def forward(self, x):$/;"	m	class:CellA
forward	models/pnasnet.py	/^    def forward(self, x):$/;"	m	class:CellB
forward	models/pnasnet.py	/^    def forward(self, x):$/;"	m	class:PNASNet
forward	models/pnasnet.py	/^    def forward(self, x):$/;"	m	class:SepConv
forward	models/preact_resnet.py	/^    def forward(self, x):$/;"	m	class:PreActBlock
forward	models/preact_resnet.py	/^    def forward(self, x):$/;"	m	class:PreActBottleneck
forward	models/preact_resnet.py	/^    def forward(self, x):$/;"	m	class:PreActResNet
forward	models/quant.py	/^    def forward(ctx, input):$/;"	m	class:BinarizeAct
forward	models/quant.py	/^    def forward(ctx, input, n_bits=2):$/;"	m	class:QuantizeAct
forward	models/quant.py	/^    def forward(self, input):$/;"	m	class:BinarizeConv2d
forward	models/quant.py	/^    def forward(self, input):$/;"	m	class:BinarizeLinear
forward	models/quant.py	/^    def forward(self, input):$/;"	m	class:QuantizeConv2d
forward	models/quant.py	/^    def forward(self, input):$/;"	m	class:QuantizeLinear
forward	models/quant.py	/^    def forward(self, input, target):$/;"	m	class:HingeLoss
forward	models/quant.py	/^    def forward(self, x):$/;"	m	class:BinarizeActLayer
forward	models/quant.py	/^    def forward(self, x):$/;"	m	class:QuantizeActLayer
forward	models/resnet.py	/^    def forward(self, x):$/;"	m	class:BasicBlock
forward	models/resnet.py	/^    def forward(self, x):$/;"	m	class:Bottleneck
forward	models/resnet.py	/^    def forward(self, x):$/;"	m	class:ResNet
forward	models/resnext.py	/^    def forward(self, x):$/;"	m	class:Block
forward	models/resnext.py	/^    def forward(self, x):$/;"	m	class:ResNeXt
forward	models/senet.py	/^    def forward(self, x):$/;"	m	class:BasicBlock
forward	models/senet.py	/^    def forward(self, x):$/;"	m	class:PreActBlock
forward	models/senet.py	/^    def forward(self, x):$/;"	m	class:SENet
forward	models/shufflenet.py	/^    def forward(self, x):$/;"	m	class:Bottleneck
forward	models/shufflenet.py	/^    def forward(self, x):$/;"	m	class:ShuffleBlock
forward	models/shufflenet.py	/^    def forward(self, x):$/;"	m	class:ShuffleNet
forward	models/shufflenetv2.py	/^    def forward(self, x):$/;"	m	class:BasicBlock
forward	models/shufflenetv2.py	/^    def forward(self, x):$/;"	m	class:DownBlock
forward	models/shufflenetv2.py	/^    def forward(self, x):$/;"	m	class:ShuffleBlock
forward	models/shufflenetv2.py	/^    def forward(self, x):$/;"	m	class:ShuffleNetV2
forward	models/shufflenetv2.py	/^    def forward(self, x):$/;"	m	class:SplitBlock
forward	models/vgg.py	/^    def forward(self, x):$/;"	m	class:VGG
forward	models/vgg_binary.py	/^    def forward(self, x):$/;"	m	class:VGG_binary
forward	models/vgg_quant.py	/^    def forward(self, x):$/;"	m	class:VGG_quant
get_mean_and_std	utils.py	/^def get_mean_and_std(dataset):$/;"	f
hinge_loss	models/quant.py	/^    def hinge_loss(self,input,target):$/;"	m	class:HingeLoss
init_params	utils.py	/^def init_params(net):$/;"	f
last_time	utils.py	/^last_time = time.time()$/;"	v
model	main.py	/^    model = torch.nn.DataParallel(model)$/;"	v
model	main.py	/^model = model.to(device)$/;"	v
model	main.py	/^model = model_dict[args.arch]$/;"	v
model_dict	main.py	/^model_dict = {$/;"	v
model_path	main.py	/^    model_path = os.path.join('.\/checkpoint', args.evaluate)$/;"	v
modify_optimizer	utils.py	/^    def modify_optimizer(optimizer, setting):$/;"	f	function:adjust_optimizer
optimizer	main.py	/^    optimizer = adjust_optimizer(optimizer, epoch, regime)$/;"	v
optimizer	main.py	/^optimizer = optim.SGD(model.parameters(), lr=args.lr, momentum=0.9, weight_decay=5e-4)$/;"	v
parser	main.py	/^parser = argparse.ArgumentParser(description='PyTorch CIFAR10 Training')$/;"	v
progress_bar	utils.py	/^def progress_bar(current, total, msg=None):$/;"	f
regime	main.py	/^regime = getattr(model, 'regime', {0: {'optimizer': args.optimizer,$/;"	v
start_epoch	main.py	/^    start_epoch = checkpoint['epoch']$/;"	v
start_epoch	main.py	/^start_epoch = args.start_epoch$/;"	v
state_dict_name	main.py	/^        state_dict_name = 'model'$/;"	v
state_dict_name	main.py	/^        state_dict_name = 'net'$/;"	v
state_dict_name	main.py	/^        state_dict_name = 'state_dict'$/;"	v
step	utils.py	/^    def step(self, closure=None):$/;"	m	class:SGD_binary
term_width	utils.py	/^term_width = int(term_width)$/;"	v
test	main.py	/^def test(epoch):$/;"	f
test	models/densenet.py	/^def test():$/;"	f
test	models/dpn.py	/^def test():$/;"	f
test	models/efficientnet.py	/^def test():$/;"	f
test	models/googlenet.py	/^def test():$/;"	f
test	models/mobilenet.py	/^def test():$/;"	f
test	models/mobilenetv2.py	/^def test():$/;"	f
test	models/pnasnet.py	/^def test():$/;"	f
test	models/preact_resnet.py	/^def test():$/;"	f
test	models/resnet.py	/^def test():$/;"	f
test	models/senet.py	/^def test():$/;"	f
test	models/shufflenet.py	/^def test():$/;"	f
test	models/shufflenetv2.py	/^def test():$/;"	f
test	models/vgg.py	/^def test():$/;"	f
test	models/vgg_binary.py	/^def test():$/;"	f
test	models/vgg_quant.py	/^def test():$/;"	f
test_acc	main.py	/^test_acc = 0$/;"	v
test_loss	main.py	/^test_loss = 0$/;"	v
test_resnext	models/resnext.py	/^def test_resnext():$/;"	f
testloader	main.py	/^testloader = torch.utils.data.DataLoader(testset, batch_size=100, shuffle=False, num_workers=1)$/;"	v
testset	main.py	/^testset = torchvision.datasets.CIFAR10(root='.\/data', train=False, download=True, transform=transform_test)$/;"	v
train	main.py	/^def train(epoch):$/;"	f
train_acc	main.py	/^train_acc = 0$/;"	v
train_loss	main.py	/^train_loss = 0$/;"	v
trainloader	main.py	/^trainloader = torch.utils.data.DataLoader(trainset, batch_size=100, shuffle=True, num_workers=1)$/;"	v
trainset	main.py	/^trainset = torchvision.datasets.CIFAR10(root='.\/data', train=True, download=True, transform=transform_train)$/;"	v
transform_test	main.py	/^transform_test = transforms.Compose([$/;"	v
transform_train	main.py	/^transform_train = transforms.Compose([$/;"	v
